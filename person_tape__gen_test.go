// Code generated by github.com/nazarifard/fastape/cmd/fastape DO NOT EDIT.
package mapi

import (
	"time"

	"github.com/nazarifard/fastape"
)

// check compileType error
var _ = func() bool {
	if false {
		var tape PersonTape
		var v Person
		_ = tape.Sizeof(v)
		_, _ = tape.Roll(v, nil)
		_, _ = tape.Unroll(nil, &v)
		return true
	}
	return false
}()

func (t PersonTape) Sizeof(v Person) int {
	size := 0
	size += t.aName.Sizeof(v.Name)
	size += t.aBirthDay.Sizeof(v.BirthDay)
	size += t.aPhone.Sizeof(v.Phone)
	size += t.aSiblings.Sizeof(v.Siblings)
	size += t.aSpouse.Sizeof(v.Spouse)
	size += t.aMoney.Sizeof(v.Money)
	return size
}

func (t PersonTape) Roll(v Person, bs []byte) (n int, err error) {
	var m int
	m, err = t.aName.Roll(v.Name, bs[n:])
	if err != nil {
		return
	}
	n += m
	m, err = t.aBirthDay.Roll(v.BirthDay, bs[n:])
	if err != nil {
		return
	}
	n += m
	m, err = t.aPhone.Roll(v.Phone, bs[n:])
	if err != nil {
		return
	}
	n += m
	m, err = t.aSiblings.Roll(v.Siblings, bs[n:])
	if err != nil {
		return
	}
	n += m
	m, err = t.aSpouse.Roll(v.Spouse, bs[n:])
	if err != nil {
		return
	}
	n += m
	m, err = t.aMoney.Roll(v.Money, bs[n:])
	if err != nil {
		return
	}
	n += m
	return
}

func (t PersonTape) Unroll(bs []byte, v *Person) (n int, err error) {
	var m int
	m, err = t.aName.Unroll(bs[n:], &v.Name)
	if err != nil {
		return
	}
	n += m
	m, err = t.aBirthDay.Unroll(bs[n:], &v.BirthDay)
	if err != nil {
		return
	}
	n += m
	m, err = t.aPhone.Unroll(bs[n:], &v.Phone)
	if err != nil {
		return
	}
	n += m
	m, err = t.aSiblings.Unroll(bs[n:], &v.Siblings)
	if err != nil {
		return
	}
	n += m
	m, err = t.aSpouse.Unroll(bs[n:], &v.Spouse)
	if err != nil {
		return
	}
	n += m
	m, err = t.aMoney.Unroll(bs[n:], &v.Money)
	if err != nil {
		return
	}
	n += m
	return
}

type PersonTape struct {
	aName     fastape.StringTape
	aBirthDay fastape.NamedTape[time.Time, time.Time, fastape.TimeTape]
	aPhone    fastape.StringTape
	aSiblings fastape.UnitTape[int]
	aSpouse   fastape.UnitTape[bool]
	aMoney    fastape.UnitTape[float64]
}
